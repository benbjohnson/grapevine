#!/usr/bin/env ruby

dir = File.dirname(File.expand_path(__FILE__))
$:.unshift(File.join(dir, '..', 'lib'))

require 'rubygems'
require 'grapevine'
require 'commander/import'
require 'terminal-table/import'

# FOR TESTING
# require 'http/wiretap'
# HTTP::Wiretap.start()

program :name, 'Grapevine'
program :version, Grapevine::VERSION
program :description, 'A simple message aggregator.'


################################################################################
# Initialization
################################################################################

# Catch CTRL-C and exit cleanly
trap("INT") do
  puts
  exit()
end

# Load configuration properties
Grapevine::Config.load_file()

# Create a registry of all loaders and notifiers
registry = Grapevine::Registry.new()
registry.load_config()

require 'grapevine/setup'


################################################################################
# Source
################################################################################

command :load do |c|
  c.syntax = 'grapevine load [name] [options]'
  c.description = 'Loads messages from a specified source.'
  c.when_called do|args, options|
    name = *args
    raise 'Source name is required' if name.nil?
    loader = registry.get_loader(name)
    raise "Source not found: #{name}" if loader.nil?
    loader.load()
  end
end

command :'show sources' do |c|
  c.syntax = 'grapevine show source [options]'
  c.description = 'Shows all registered sources.'
  c.when_called do|args, options|
    loaders = registry.loaders
    
    if loaders.length == 0
      puts "No sources have been registered."
    else
      tbl = table do |t|
        t.headings = 'Name', 'Type', 'Frequency (s)'
        loaders.each do |loader|
          t << [loader.name, loader.class.to_s.split(':').pop, loader.frequency]
        end
      end
      
      puts tbl
    end
  end
end


################################################################################
# Notifiers
################################################################################

command :notify do |c|
  c.syntax = 'grapevine notify [name] [options]'
  c.description = 'Manually sends a notification for a given notifier.'
  c.option '--force', 'Ignores the frequency of notification when sending.'
  c.when_called do|args, options|
    name = *args
    raise 'Notifier name is required' if name.nil?
    notifier = registry.get_notifier(name)
    raise "Notifier not found: #{name}" if notifier.nil?
    notifier.send(:force => options.force)
  end
end

command :'show notifiers' do |c|
  c.syntax = 'grapevine show notifiers [options]'
  c.description = 'Shows all registered notifiers.'
  c.when_called do|args, options|
    notifiers = registry.notifiers
    
    if notifiers.length == 0
      puts "No notifiers have been registered."
    else
      tbl = table do |t|
        t.headings = 'Name', 'Type', 'Frequency (s)'
        notifiers.each do |notifier|
          t << [
            notifier.name,
            notifier.class.to_s.split(':').pop,
            notifier.frequency
          ]
        end
      end      
      puts tbl
    end
  end
end

command :'show notifier' do |c|
  c.syntax = 'grapevine show notifier [name] [options]'
  c.description = 'Shows details about a single registered notifier.'
  c.when_called do|args, options|
    name = *args
    raise 'Notifier name is required' if name.nil?
    notifier = registry.get_notifier(name)
    raise "Notifier not found: #{name}" if notifier.nil?
    
    topics = notifier.popular_topics
    notifications = Notification.all(:source => name)
    
    puts "Name:       #{notifier.name}"
    puts "Source:     #{notifier.source}"
    puts "Frequency:  #{notifier.frequency}s"
    puts "Window:     #{notifier.window }s"
    puts "Tags:       #{notifier.tags.join(',')}"
    puts "State:      #{notifier.state}"
    puts ""
    puts "Popular Topics (#{topics.length})"
    topics[0..9].each_index do |index|
      topic = topics[index]
      puts "#{index+1}. #{topic.name} (#{topic.messages.length} msgs)"
    end
    puts ""
  end
end

command :'clear notifications' do |c|
  c.syntax = 'grapevine clear notifications [name] [options]'
  c.description = 'Removes all notifications for a notifier.'
  c.when_called do|args, options|
    name = *args
    raise 'Notifier name is required' if name.nil?
    
    notifications = Notification.all(:source => name)
    count = notifications.length
    notifications.destroy
    puts "#{notifications.length} notifications were removed."
  end
end


################################################################################
# Topics
################################################################################

command :'show topics' do |c|
  c.syntax = 'grapevine show topics'
  c.description = 'Displays the topics in the database.'
  c.option '--tag TAG', String, 'Filters the topics by tag.'
  c.when_called do|args, options|
    topics = Topic.all
    tag = options.tag
    
    if topics.length == 0
      say "No topics exist in the database"
    else
      user_table = table do |t|
        t.headings = 'ID', 'Msgs', 'Name', 'Description'
        topics.each do |topic|
          # Filter by tag if specified
          if !tag.nil?
            match = false
            topic.tags.each do |item|
              if "#{item.type}:#{item.value}" == tag
                match = true
              end
            end
            next unless match
          end
          
          t << [topic.id, topic.messages.length, topic.name[0..20], topic.description[0..35]]
        end
      end
      
      puts user_table
    end
  end
end

command :'show topic' do |c|
  c.syntax = 'grapevine show topic [name] [options]'
  c.description = 'Shows details about a single topic.'
  c.when_called do|args, options|
    name = *args
    raise 'Topic name is required' if name.nil?
    topic = Topic.first(:name => name)
    raise "Topic not found: #{name}" if topic.nil?
    
    puts "Name: #{topic.name}"
    puts "Desc: #{topic.description}"
    puts "URL: #{topic.url}"
    puts ""
    puts "Tags (#{topic.tags.length})"
    topic.tags.each do |tag|
      puts "- #{tag.type}:#{tag.value}"
    end
    puts ""
    puts "Messages (#{topic.messages.length})"
    topic.messages[0..9].each do |message|
      puts "- #{message.source_id}: #{message.author}"
    end
    puts ""
  end
end


################################################################################
# Messages
################################################################################

command :'show messages' do |c|
  c.syntax = 'grapevine show messages [options]'
  c.description = 'Displays the messages in the database.'
  c.option '--topic-id ID', String, 'Filters the messages by topic id.'

  c.when_called do|args, options|
    filter = {}
    filter.merge!(:topic_id => options.topic_id.to_i) if options.topic_id
    messages = Message.all(filter)
    
    if messages.length > 0
      user_table = table do |t|
        t.headings = 'ID', 'Source ID', 'Author'
        messages.each do |message|
          t << [message.id, message.source_id, message.author[0..50]]
        end
      end
      
      puts user_table
    end
  end
end


################################################################################
# Tags
################################################################################

command :'show tags' do |c|
  c.syntax = 'grapevine show tags'
  c.description = 'Displays a list of all tags in the database.'
  c.when_called do|args, options|
    tags = Tag.all(:order => [:type, :value])
    
    if tags.length == 0
      say "No tags exist in the database."
    else
      tbl = table do |t|
        t.headings = 'Type', 'Value', 'Topics'
        tags.each do |tag|
          t << [tag.type, tag.value, tag.topics.length]
        end
      end
      puts tbl
    end
  end
end


################################################################################
# Database Maintenance
################################################################################

command :info do |c|
  c.syntax = 'grapevine info'
  c.description = 'Displays information about the contents of the database.'
  c.when_called do|args, options|
    puts "Database: #{Grapevine::Config.database}"
    puts "Topics: #{Topic.all.length}"
    puts "Messages: #{Message.all.length}"
    puts "Tags: #{Tag.all.length}"
    puts "Notifications: #{Notification.all.length}"
  end
end

command :clean do |c|
  c.syntax = 'grapevine clean'
  c.description = 'Removes all data from the grapevine database.'
  c.when_called do|args, options|
    DataMapper.auto_migrate!
  end
end

